@*@using Kendo.Mvc.UI
@using MovieStreaming.Custom.Models
@using MovieStreaming.Custom.Helpers

<script src="~/kendo/js/jszip.min.js"></script>
<script>
    function sync_handler(e) {
        e.sender.read();
    }

    function onError(e, status) {
        var popupNotification = $("#notification").data("kendoNotification");
        if (e.status == "customerror") {
            popupNotification.show(e.errors);
        }
        else {
            popupNotification.show("Generic server error!");
        }
    }
</script>
<style>
    .k-grid-header {
        background-color: #f5f6f8;
    }

    .k-toolbar .k-button {
        color: #000;
        background-color: #f5f6f8;
        border-color: #f5f6f8;
    }

    .k-pager-numbers .k-link.k-state-selected {
        color: white;
        background-color: #7f838b;
    }

    .k-pager-numbers .k-link {
        color: #7f838b;
    }

    .k-command-cell .k-grid-update {
        color: #3b76e1;
        background-color: rgba(88,143,209,.23) !important;
    }

    .k-command-cell .k-grid-cancel {
        color: #000;
        background-color: #f5f6f8;
        border-color: #f5f6f8;
    }

    .k-command-cell .k-grid-edit {
        color: #63ad6f;
        background-color: rgba(99,173,111,.1);
    }

    .k-command-cell .k-grid-delete {
        color: #f56e6e;
        background-color: rgba(245,110,110,.1);
    }
</style>
@(Html.Kendo().Notification()
        .Name("notification")
        .Position(p => p.Pinned(true).Top(30).Right(30))
)
<div class="container">
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex align-items-start">
                        <div class="flex-grow-1">
                            <h4>Authorization</h4>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        @(Html.Kendo().Grid<MovieStreaming.Areas.Admin.Models.ViewAuthorization.ViewAuthorization>()
                                    .Name("gridAuthorization")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(p => p.ID).Hidden(true);
                                        columns.ForeignKey(p => p.RoleID, (System.Collections.IEnumerable)ViewBag.Roles, "Value", "Text").Title("Role").Width(200);
                                        columns.ForeignKey(p => p.ViewID, (System.Collections.IEnumerable)ViewBag.Views, "Value", "Text").Title("View").Width(200);
                                        columns.Bound(p => p.ViewURL).Title("URL").Width(220);
                                        columns.ForeignKey(p => p.AuthorizationTypeID, (System.Collections.IEnumerable)ViewBag.AuthorizationType, "Value", "Text").Title("Authorization").Width(150);
                                        columns.Command(command =>
                                        {
                                            command.Edit().Text("Edit").UpdateText("Save").CancelText("Cancel");
                                            command.Destroy().Text("Delete");
                                        })
                                        .Width(300);
                                    })
                                    .ToolBar(tools =>
                                    {
                                        tools.Create().Text("Add").HtmlAttributes(new { style = "color:#fff;background-color: #3b76e1;border-color: #3b76e1;" });
                                        tools.Excel().Text("Export");
                                    })
                                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                                    .Excel(excel => excel
                                    .FileName("Authorization.xlsx")
                                    .Filterable(true)
                                    .AllPages(true)
                                    .ProxyURL(Url.Action("ExportToFile", "Home")))
                                    .Pageable(pager => pager.Refresh(true).PageSizes(new[] { 10, 20, 30 }).Refresh(true))
                                    .Sortable()
                                    .Scrollable()
                                    .Filterable()
                                    .Resizable(resize => resize.Columns(true))
                                    .HtmlAttributes(new { style = "height:700px;border-style: none;" })
                                    .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .Events(events => events.Error("onError"))
                                    .Events(e => e.Sync("sync_handler"))
                                    .PageSize(20)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.ID);
                                        model.Field(p => p.RoleID);
                                        model.Field(p => p.ViewID);
                                        model.Field(p => p.AuthorizationTypeID);
                                        model.Field(p => p.ViewURL).Editable(false);
                                    })
                                    .Read(read => read.Action("GetAll", "ViewAuthorization"))
                                    .Update(update => update.Action("Update", "ViewAuthorization"))
                                    .Create(create => create.Action("Create", "ViewAuthorization"))
                                    .Destroy(delete => delete.Action("Delete", "ViewAuthorization"))
                                    )
                                )
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

*@